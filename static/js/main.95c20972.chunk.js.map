{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","cudo","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","console","log","state","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","monster","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAGaA,SAAO,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,KAAKC,GAArC,4BACtBR,EAAAC,EAAAC,cAAA,cAAMH,EAAMQ,KAAKE,KAAjB,KACAT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,KAAKG,UCDVC,SAAW,SAAAZ,GAAK,OAEzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEVJ,EAAMa,SAASC,IAAI,SAAAN,GAAI,OAAKP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAAKC,GAAID,KAAMA,SCNlDS,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACrBnB,EAAAC,EAAAC,cAAA,SACIC,UAAU,SACViB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoFHG,qBArFb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAkBFP,aAAe,SAAAW,GACbP,EAAKQ,SAAS,CAACC,YAAaF,EAAEG,OAAOC,OAAS,kBAAMC,QAAQC,IAAIb,EAAKc,UAjBrEd,EAAKc,MAAQ,CACXzB,SAAU,GACVoB,YAAa,IALHT,mFAwBM,IAAAe,EAAAZ,KAClBa,MAAM,8CAELC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKP,SAAS,CAAEnB,SAAU+B,uCAGlC,IAAAC,EAE4BlB,KAAKW,MAA9BzB,EAFHgC,EAEGhC,SAAUoB,EAFbY,EAEaZ,YAIZa,EAAmBjC,EAASkC,OAAO,SAAAC,GAAO,OAAIA,EAAQtC,KAAKuC,cAAcC,SAASjB,EAAYgB,iBAEtG,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAwBbH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACgD,EAAD,CACEhC,YAAY,kBACZC,aAAcO,KAAKP,eAUrBnB,EAAAC,EAAAC,cAACiD,EAAD,CAAUvC,SAAUiC,YAhFVO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.95c20972.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.cudo.id}?set=set3&size=180x180`} />\r\n        <h2> {props.cudo.name} </h2>\r\n        <p>{props.cudo.email}</p>\r\n    </div>  \r\n);","import React from 'react';\r\n\r\nimport {Card} from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n    /* Ovde je vec kao props definisan onaj niz monsters */\r\n    <div className='card-list'>\r\n        {/* svaki clan monsters niza ce se definisati kao objekat pod imenom monster - ja zamenio sa cudo */}\r\n        {props.monsters.map(cudo => (<Card key={cudo.id} cudo={cudo}/>))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className='search' \r\n        type='search' \r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n        />\r\n);","import React, {Component} from 'react';\n\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  /* Klasa ima svoj kontruktor koji mora imati super()  */\n  constructor() {\n    super();\n   /* Definise se prazan niz montsers kao niz koji predstavlja state komponentu na nivou cele app */ \n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    /* Ovaj red mora postojati ako se ne koriste arrow function da bi se ovaj metod povezao sa modulom app \n    this.handleChange = this.handleChange.bind(this);*/\n  }\n  \n  /* handleChange metod napisan kao handleChange(e) {...} mora da prati i dodatak u class - i koja koristi ovj metod na gore naveden nacin \n  \n  handleChange(e) {\n    this.setState({searchField: e.target.value} , () => console.log(this.state))\n  } */\n  /* arrow function ide sa => i ona automatski radi bind sa klasom moze i u zagradama (e)  */\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value} , () => console.log(this.state));\n  }\n\n  /* U toku postavljanja ove komponenter App, treba da se ucitaju podaci sa lokacije koja je navedena */\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    /* Nakon komande za fetch odgovor je users koji treba konvertovati u json  */\n    .then(response => response.json())\n    /* Nakon toga postavi stanje monsters na users */\n    .then(users => this.setState({ monsters: users}))\n  }\n\n  render() {\n      /* Pre rendera definisu se promenljive koje ce odgovarati this.state - u*/\n      const { monsters, searchField} = this.state;\n      /* Definise se novi niz koji nastaje kao filtriran niz sa sintaksom - niz predstavlja deo niza \n      monsters, a sintaksa kaze da ce svaki clan niza monsters, nazvan monster, biti uporedjen sa unetim sadrzajem\n      u polje searchField. Zbog tacnog uporedjenja oba stringa se postavljaju kao mala slova. */\n      const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()) );\n\n    return(\n      <div className='App'>\n        {/* Input komponenta typa searc , a sta se trazi u polju input sivim slovima pise u atributu placeholder\n        Dodata je metoda u ovom input polju na promenu onChange u {} zagradama. Ovo je da prikaze u console e kao event\n        objekat od koga trazimo properties target.value (ono sto kucamo.)\n        {e=> console.log(e.target.value)}. Da bi promenili stanje searchField potrebno je da kazemo this.setstate */}\n\n        {/* Ukoliko se na onChange zeli akcija nakon unosa svakog karaktera potrebno je definisati callback funciju koja se \n        pise kao drugi parametar setState metode, inace ako damo komandu console.log ... posle steState u state ce se videti\n        uvek predhodna izmena.*/}\n\n        {/* Ovaj deo ce se prebaciti u funkcijsku komponentu SearchBox \n        \n        <input \n          type='search' \n          placeholder='search monsters' \n          onChange={e=> this.setState({searchField: e.target.value} , () => console.log(this.state))}/> */}\n        \n        {/*\n          Sledeca lekcija izmesta handleChange prop u deo definisanja funkcija u istom modulu.\n\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={e=> this.setState({searchField: e.target.value} , () => console.log(this.state))}\n        /> */}\n        <h1> Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}\n           />\n\n\n        {/* Tab je komponenta CardList koja je importovana na vrhu, props je niz monsters, odnosno state.monsters\n          poziva se komponenta CardList sa props (parametrima) stanja monsters (this.state.monsters).\n          Osnovna verzija ako props u CardList prosledjuje {this.state.monsters}, medjutim potrebno je kao props\n          proslediti filtrirani niz (filteredMonsters), tako ce uvek biti prikazan onaj broj clanova koji zadovoljavaju\n          kriterijum koji je unet u filter polju.\n          */}\n        <CardList monsters={filteredMonsters}> \n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}